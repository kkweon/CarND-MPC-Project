#+TITLE: MPC Notes
#+AUTHOR: Kyung Mo Kweon

* Table of Contents                                                :TOC_2_GH:
- [[#algorithms][Algorithms]]
- [[#libraries][Libraries]]
  - [[#ipopt][Ipopt]]
  - [[#cppad][CppAd]]
- [[#code-structure][Code Structure]]
  - [[#mpcsolve-method][=MPC::Solve= method]]
  - [[#fg_eval-class][FG_eval class]]
  - [[#summary][Summary]]

* Algorithms
- Set =N= and =dt=
- Fit the polynomial to the way point
- Calculate initial cross track error (CTE) and orientation error values
- Define cost functions
- Define model constraints

* Libraries

** Ipopt
- find locally optimal values
- requires Jacobian and Hessian input
  - That's why we need =CppAd=

** CppAd
- Automatic differentiation tool
- Use =CppAd= namespace

*** Example
#+BEGIN_SRC C++ :exports code
  CppAD<double>;     // instead of double
  CppAD::pow(x, 2);  // instead of std::pow(x, 2)
#+END_SRC

* Code Structure
There are two main components in =MPC.cpp=

- =vector<double> MPC::Solve(VectorXd state, VectorXd coeffs)= method
- =FG_eval= class

** =MPC::Solve= method

- state :: [x, y, psi, v, cte, epsi]
- coeffs :: Coefficients for the fitting polynomial

The task can be divided into two sub tasks for =Ipopt=

1. Set up variables
2. Set up vehicle model constraints

*** Set up variables
=Ipopt= expects all the constraints and variables as vectors.
Suppose =N= is 5. Then, there are ~5 * 6 = 30~ states ~4 * 2 = 8~ control inputs (total 38).

Also, don't forget the delta is bounded =[-25, 25]=.

#+BEGIN_SRC C++ :exports code
  for (int i = 0; i < N; ++i) {
    // states
    vars[i] = x_i;
    vars[i + 5] = y_i;
    vars[i + 10] = psi_i;
    vars[i + 15] = v_i;
    vars[i + 20] = cte_i;
    vars[i + 25] = epsi_i;

    if (i < N - 1) {
      // control inputs
      vars[i + 30] = delta_i;
      vars[i + 34] = a_i;
    }
  }

  // Constraints variables
  for (int i = delta_start, i < a_start, ++i) {
    vars_lowerbound[i] = -0.436332;  // radian -25
    vars_upperbound[i] = 0.436332;   // radian 25
  }
#+END_SRC

*** Set up model constraints

For example,

#+BEGIN_SRC latex :exports results :results raw :file images/first.png
$$ x_{t+1} = x_t + v_t \cdot cos(\psi_t) \cdot dt $$
#+END_SRC

#+RESULTS:
[[file:images/first.png]]

can be written as a constraint like this

#+BEGIN_SRC latex :exports results :results raw :file images/second.png
$$ x_{t+1} - x_t - v_t \cdot cos(\psi_t) \cdot dt = 0 $$
#+END_SRC

#+RESULTS:
[[file:images/second.png]]

Also, it means that ~lowerbound = upperbound = 0~

So, in the code

#+BEGIN_SRC C++ :exports code
  for (int i = 0; i < n_constraints; ++i) {
    constraints_lowerbound[i] = 0;
    constraints_upperbound[i] = 0;
  }
#+END_SRC
** FG_eval class
*** Class Diagram
#+BEGIN_SRC plantuml :exports results :file images/classdiagram.png :mkdirp yes
class FG_eval {
  + coeffs : VectorXd
  FG_eval(VectorXd coeffs)
  operator()(ADvector& fg, const ADvector& vars)
}
#+END_SRC

#+RESULTS:
[[file:images/classdiagram.png]]


- =vars= :: vector of variables defined above
- =fg= :: vector of constraints

Note that =fg[0]= stores the cost value.

*** Cost function
Cost function can be defined as below:
#+BEGIN_SRC C++ :exports code
  void operator()(ADvector& fg, const ADvector& vars) {
    // The cost is stored is the first element of `fg`.
    // Any additions to the cost should be added to `fg[0]`.
    fg[0] = 0;

    // Cost function
    // TODO: Define the cost related the reference state and
    // any anything you think may be beneficial.

    // The part of the cost based on the reference state.
    for (int t = 0; t < N; t++) {
      fg[0] += CppAD::pow(vars[cte_start + t], 2);
      fg[0] += CppAD::pow(vars[epsi_start + t], 2);
      fg[0] += CppAD::pow(vars[v_start + t] - ref_v, 2);
    }

    // Minimize the use of actuators.
    for (int t = 0; t < N - 1; t++) {
      fg[0] += CppAD::pow(vars[delta_start + t], 2);
      fg[0] += CppAD::pow(vars[a_start + t], 2);
    }

    // Minimize the value gap between sequential actuations.
    for (int t = 0; t < N - 2; t++) {
      fg[0] += CppAD::pow(vars[delta_start + t + 1] - vars[delta_start + t], 2);
      fg[0] += CppAD::pow(vars[a_start + t + 1] - vars[a_start + t], 2);
    }
#+END_SRC

*** Setting up constraints
#+BEGIN_SRC C++ :exports code
  for (int t = 1; t < N; t++) {
    // The state at time t+1 .
    AD<double> x1 = vars[x_start + t];
    AD<double> y1 = vars[y_start + t];
    AD<double> psi1 = vars[psi_start + t];
    AD<double> v1 = vars[v_start + t];
    AD<double> cte1 = vars[cte_start + t];
    AD<double> epsi1 = vars[epsi_start + t];

    // The state at time t.
    AD<double> x0 = vars[x_start + t - 1];
    AD<double> y0 = vars[y_start + t - 1];
    AD<double> psi0 = vars[psi_start + t - 1];
    AD<double> v0 = vars[v_start + t - 1];
    AD<double> cte0 = vars[cte_start + t - 1];
    AD<double> epsi0 = vars[epsi_start + t - 1];

    // Only consider the actuation at time t.
    AD<double> delta0 = vars[delta_start + t - 1];
    AD<double> a0 = vars[a_start + t - 1];

    AD<double> f0 = coeffs[0] + coeffs[1] * x0;
    AD<double> psides0 = CppAD::atan(coeffs[1]);

    // Here's `x` to get you started.
    // The idea here is to constraint this value to be 0.
    //
    // Recall the equations for the model:
    // x_[t] = x[t-1] + v[t-1] * cos(psi[t-1]) * dt
    // y_[t] = y[t-1] + v[t-1] * sin(psi[t-1]) * dt
    // psi_[t] = psi[t-1] + v[t-1] / Lf * delta[t-1] * dt
    // v_[t] = v[t-1] + a[t-1] * dt
    // cte[t] = f(x[t-1]) - y[t-1] + v[t-1] * sin(epsi[t-1]) * dt
    // epsi[t] = psi[t] - psides[t-1] + v[t-1] * delta[t-1] / Lf * dt
    fg[1 + x_start + t] = x1 - (x0 + v0 * CppAD::cos(psi0) * dt);
    fg[1 + y_start + t] = y1 - (y0 + v0 * CppAD::sin(psi0) * dt);
    fg[1 + psi_start + t] = psi1 - (psi0 + v0 * delta0 / Lf * dt);
    fg[1 + v_start + t] = v1 - (v0 + a0 * dt);
    fg[1 + cte_start + t] = cte1 - ((f0 - y0) + (v0 * CppAD::sin(epsi0) * dt));
    fg[1 + epsi_start + t] = epsi1 - ((psi0 - psides0) + v0 * delta0 / Lf * dt);
  }
#+END_SRC



** Summary

#+BEGIN_SRC C++ :exports code
  // place to return solution
  CppAD::ipopt::solve_result<Dvector> solution;

  // solve the problem
  CppAD::ipopt::solve<Dvector, FG_eval>(options, vars, vars_lowerbound,
                                        vars_upperbound, constraints_lowerbound,
                                        constraints_upperbound, fg_eval,
                                        solution);
#+END_SRC

- =solution.x= :: contains a solution vector
- =solution.obj_value= :: is the cost
